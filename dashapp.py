import os
import json
from dash import dash_table
import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
from io import BytesIO
import re
import base64
from dash import html, dcc, Dash
from dash.dependencies import Output, Input
from google.analytics.data_v1beta import BetaAnalyticsDataClient, RunReportRequest, Dimension, DateRange, Metric  # type: ignore
import math
from dash import no_update

# Hent innholdet fra Streamlit Secrets
key_content = st.secrets["GOOGLE_APPLICATION_CREDENTIALS_CONTENT"]

# Konverter AttrDict til en vanlig Python-ordbok
key_content_dict = dict(key_content)

# Konverter innholdet til en JSON-streng
key_content_str = json.dumps(key_content_dict)

# Lagre innholdet midlertidig som en fil
with open("key.json", "w") as key_file:
    key_file.write(key_content_str)

# Sett miljÃ¸variabelen for Google Analytics
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "key.json"

# Oppdater sidetittelen og ikonet i st.set_page_config:
st.set_page_config(
    layout="wide",
    page_title="SmartDash",
    page_icon="ðŸš€"  # eks. et alternativt emoji-ikon
)

# Google Analytics (frontend-script)
st.markdown("""
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Q4PWWTXBB4"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-Q4PWWTXBB4');
</script>
""", unsafe_allow_html=True)

# ----------------------------
# 2. Dataopplasting og standarddata
# ----------------------------
st.sidebar.header("ðŸ“‚ Last opp dine data")
uploaded_sales = st.sidebar.file_uploader("Last opp Salgsdata", type="csv", key="sales")
uploaded_cost = st.sidebar.file_uploader("Last opp Kostnadsdata", type="csv", key="cost")
uploaded_traffic = st.sidebar.file_uploader("Last opp Trafikkdata", type="csv", key="traffic")
uploaded_prod = st.sidebar.file_uploader("Last opp Produktdata", type="csv", key="prod")
uploaded_prices = st.sidebar.file_uploader("Last opp InnkjÃ¸pspriser", type="csv", key="prices")

@st.cache_data
def load_sales_data(filepath):
    df = pd.read_csv(filepath)
    df.columns = df.columns.str.strip().str.lower()
    rename_map = {"date": "dato", "sales": "omsetning", "antallsolgt": "antallordre"}
    df = df.rename(columns=rename_map)
    if "dato" in df.columns:
        df["Dato"] = pd.to_datetime(df["dato"], errors="coerce").dt.date
    if "omsetning" in df.columns:
        df["Omsetning"] = pd.to_numeric(df["omsetning"].astype(str).str.replace(" ", ""), errors="coerce")
    if "antallordre" in df.columns:
        df["Ant. ordre"] = pd.to_numeric(df["antallordre"], errors="coerce")
    return df

def read_standard_csv(filepath, date_col="date"):
    df = pd.read_csv(filepath)
    df.columns = df.columns.str.strip()
    if date_col in df.columns:
        df[date_col] = pd.to_datetime(df[date_col], errors="coerce")
    elif "dato" in df.columns:
        df.rename(columns={"dato": date_col}, inplace=True)
        df[date_col] = pd.to_datetime(df[date_col], errors="coerce")
    else:
        st.error("Ingen dato-kolonne funnet.")
    return df

if uploaded_sales is not None:
    sales_df = load_sales_data(uploaded_sales)
else:
    sales_df = load_sales_data("./standardized_sales.csv")

if uploaded_cost is not None:
    cost_df = read_standard_csv(uploaded_cost, date_col="date")
else:
    cost_df = read_standard_csv("./standardized_cost.csv", date_col="date")

if uploaded_traffic is not None:
    traffic_df = read_standard_csv(uploaded_traffic, date_col="date")
else:
    traffic_df = read_standard_csv("./standardized_traffic.csv", date_col="date")

if uploaded_prod is not None:
    product_sales_df = read_standard_csv(uploaded_prod, date_col="date")
else:
    product_sales_df = read_standard_csv("./standardized_product_sales.csv", date_col="date")

if "Produktnavn" in product_sales_df.columns:
    product_sales_df.rename(columns={"Produktnavn": "product_name"}, inplace=True)
if "SKU" in product_sales_df.columns:
    product_sales_df.rename(columns={"SKU": "sku"}, inplace=True)

# ----------------------------
# 3. Navigasjon / Tabs
# ----------------------------
tabs = st.tabs([
    "Salgsdata",  
    "Kostnadsanalyse & Budsjett", 
    "Lagerinnsikt & InnkjÃ¸psstrategi", 
    "Digital Analyse & SEO", 
    "Konkurrentanalyse", 
    "BedriftsrÃ¥d (Oppsummering)", 
    "Verdivurdering", 
    "Analytics Live-data"
])

# ----------------------------
# FANE 1 â€“ Salgsdata med templatemaler og info om SmartDash
with tabs[0]:
    st.markdown("### Slik bruker dere SmartDash")
    st.markdown("""
**Templatemaler for opplasting**  
Her finner dere eksempelfiler for opplasting, basert pÃ¥ Luxushair sine data som vises som standard/eksempler her i Dashboardet.  
Last ned eksempelfilene, og erstatt med egne data. FÃ¸lg nÃ¸yaktig samme struktur og ha nÃ¸yaktig samme navn pÃ¥ filene nÃ¥r de lastes opp igjen i venstre sidebar.  
- [Standardisert salgsdata CSV](standardized_sales.csv)  
- [Standardisert kostnadsdata CSV](standardized_cost.csv)  
- [Standardisert trafikkdata CSV](standardized_traffic.csv)  
- [Standardisert produktdata CSV](standardized_product_sales.csv)  
- [Standardisert innkjÃ¸pspriser CSV](standardized_prices.csv)
    """)
    st.header("Salgsdata")
    st.markdown("Her kan du se salgsdata for valgte perioder. Velg om du vil se data daglig eller aggregert per mÃ¥ned, og hvilken visualisering du Ã¸nsker.")
    
    filter_mode = st.radio("Filtermodus", ("Daglig", "MÃ¥nedlig"))
    vis_type = st.selectbox("Velg visualiseringsmetode", ("Stolpediagram", "Linjediagram", "Kakediagram"))
    
    if filter_mode == "Daglig":
        start_date = st.date_input("Velg startdato", value=datetime(2024, 1, 1))
        end_date = st.date_input("Velg sluttdato", value=datetime(2024, 12, 31))
        mask = (pd.to_datetime(sales_df["Dato"]) >= pd.to_datetime(start_date)) & \
               (pd.to_datetime(sales_df["Dato"]) <= pd.to_datetime(end_date))
        filtered_sales = sales_df.loc[mask]
        st.write("Filtrerte salgsdata (daglig):", filtered_sales)
        if vis_type == "Stolpediagram":
            fig = px.bar(filtered_sales, x="Dato", y="Omsetning", title="Omsetning per dag")
        elif vis_type == "Linjediagram":
            fig = px.line(filtered_sales, x="Dato", y="Omsetning", title="Omsetning per dag")
        else:
            agg = filtered_sales.groupby("Dato", as_index=False)["Omsetning"].sum()
            fig = px.pie(agg, names="Dato", values="Omsetning", title="Andel omsetning daglig")
        st.plotly_chart(fig, use_container_width=True, key="fig_sales_daily")
    else:
        sales_df["YearMonth"] = pd.to_datetime(sales_df["Dato"]).dt.to_period("M").astype(str)
        start_month = st.text_input("StartmÃ¥ned (YYYY-MM)", value="2024-01")
        end_month = st.text_input("SluttmÃ¥ned (YYYY-MM)", value="2024-12")
        mask = (sales_df["YearMonth"] >= start_month) & (sales_df["YearMonth"] <= end_month)
        filtered_sales = sales_df.loc[mask].copy()
        agg_sales = filtered_sales.groupby("YearMonth", as_index=False)["Omsetning"].sum()
        st.write("Aggregert salgsdata per mÃ¥ned:", agg_sales)
        if vis_type == "Stolpediagram":
            fig = px.bar(agg_sales, x="YearMonth", y="Omsetning", title="Omsetning per mÃ¥ned")
        elif vis_type == "Linjediagram":
            fig = px.line(agg_sales, x="YearMonth", y="Omsetning", title="Omsetning per mÃ¥ned")
        else:
            fig = px.pie(agg_sales, names="YearMonth", values="Omsetning", title="Andel omsetning per mÃ¥ned")
        st.plotly_chart(fig, use_container_width=True, key="fig_sales_monthly")
        
    st.markdown("**Merk:** Dataene kan filtreres bÃ¥de pÃ¥ daglig og mÃ¥nedlig basis.")
    
# Definer globale variabler
if "total_cost" not in st.session_state:
    st.session_state["total_cost"] = None
if "optimal_revenue" not in st.session_state:
    st.session_state["optimal_revenue"] = None

# Oppdater verdiene i Fane 2
with tabs[1]:
    # Beregn total_cost og optimal_revenue
    st.session_state["total_cost"] = total_cost
    st.session_state["optimal_revenue"] = optimal_revenue

# Bruk verdiene i Fane 6
with tabs[5]:
    total_cost = st.session_state["total_cost"]
    optimal_revenue = st.session_state["optimal_revenue"]
# ----------------------------
# FANE 2 â€“ Kostnadsanalyse & Budsjett
# ----------------------------
with tabs[1]:
    st.header("Kostnadsanalyse & Budsjett")
    st.markdown("**Kostnadsdata for hele 2024**")
    st.write(cost_df)
    cost_columns = [col for col in ["varekostnad", "driftskostnader", "finansielle_kostnader", "lÃ¸nnskostnad", "totale_kostnader"] if col in cost_df.columns]
    if cost_columns:
        fig_cost = px.bar(cost_df, x="date", y=cost_columns, 
                          title="Kostnader per mÃ¥ned",
                          barmode="group",
                          labels={"value": "Kostnader (kr)", "variable": "Kostnadstype"})
        st.plotly_chart(fig_cost, use_container_width=True, key="fig_cost_chart")
    else:
        st.error("Ingen kostnadskolonner funnet for Ã¥ lage diagram.")
    st.markdown("#### Kostnadstall per kategori:")
    for col in cost_columns:
        if col in cost_df.columns:
            total = cost_df[col].sum()
            st.markdown(f"- **{col.capitalize()}**: {total:,.0f} kr")
    selected_margin = st.number_input("Angi Ã¸nsket fortjenestemargin (%)", min_value=0.0, max_value=100.0, 
                                      value=30.0, step=1.0, key="margin_kostnad")
    margin = selected_margin / 100.0
    if "totale_kostnader" in cost_df.columns:
        total_cost = cost_df["totale_kostnader"].iloc[0]
    else:
        total_cost = sum(cost_df[col].sum() for col in cost_columns)
    optimal_revenue = total_cost / (1 - margin)
    
    st.markdown(f"**Total kostnad:** {total_cost:,.0f} kr")
    st.markdown(f"**Optimal budsjettert omsetning:** {optimal_revenue:,.0f} kr")
    st.markdown(f"""
**Forklaring:**  
Her brukes en fortjenestemargin pÃ¥ {selected_margin:.0f}% (desimalverdi {margin}) for Ã¥ beregne optimal budsjettert omsetning.  
Formelen er:  
â€ƒâ€ƒTotal kostnad / (1 â€“ margin)  
AltsÃ¥, dersom de totale kostnadene er {total_cost:,.0f} kr,  
mÃ¥ omsetningen vÃ¦re minst {optimal_revenue:,.0f} kr for Ã¥ oppnÃ¥ Ã¸nsket fortjeneste.
    """)
# ----------------------------
# FANE 3 â€“ Lagerinnsikt & InnkjÃ¸psstrategi (Filtrering pÃ¥ produktnavn og lengde)
# ----------------------------
with tabs[2]:
    st.header("Lagerinnsikt & InnkjÃ¸psstrategi (Filtrering pÃ¥ produktnavn og lengde)")

    # Velg produktnavn med standardverdi
    product_options = ["Alle"] + sorted(product_sales_df["product_name"].dropna().unique())
    default_index = product_options.index("Clip On Extension Virgin") if "Clip On Extension Virgin" in product_options else 0
    selected_product = st.selectbox(
        "Velg produktnavn",
        options=product_options,
        index=default_index,  # Sett "Clip On Extension Virgin" som standard
        key="product_name_filter"
    )

    # Velg lengde med standardverdi
    selected_length = st.selectbox(
        "Velg lengde (cm)", 
        options=["Alle", "Tom", "40 cm", "50 cm", "55 cm", "60 cm"], 
        index=0,  # "Alle" som standard
        key="length_filter"
    )

    # Velg datoer med standardverdier
    inv_start_date = st.date_input("Startdato", value=datetime(2024, 1, 1), key="sku_start")
    inv_end_date = st.date_input("Sluttdato", value=datetime(2024, 12, 31), key="sku_end")

    # Filtrer data basert pÃ¥ dato
    mask = (product_sales_df["date"] >= pd.to_datetime(inv_start_date)) & \
           (product_sales_df["date"] <= pd.to_datetime(inv_end_date))
    df = product_sales_df.loc[mask].copy()

    # Filtrer data for valgt produktnavn (hvis ikke "Alle")
    if selected_product != "Alle":
        df = df[df["product_name"] == selected_product]

    # Filtrer data for valgt lengde
    if selected_length != "Alle":
        if selected_length == "Tom":
            df = df[~df["sku"].str.contains(r"\d+\s*cm", na=False, case=False)]
        else:
            pattern = re.compile(rf"\b{re.escape(selected_length.strip())}\b", re.IGNORECASE)
            df = df[df["sku"].str.contains(pattern, na=False)]

    # Sjekk om df er tom
    if df.empty:
        st.error("Ingen data tilgjengelig for de valgte filtrene.")
    else:
        # Sorter data etter Ã¸nsket kolonne (f.eks. "antallsolgt")
        df_sorted = df.sort_values(by="antallsolgt", ascending=False)

        # Fyll inn NaN-verdier i "antallsolgt" med 0
        df_sorted["antallsolgt"] = df_sorted["antallsolgt"].fillna(0)

        # Beregn "Anbefalt innkjÃ¸p"
        df_sorted["Anbefalt innkjÃ¸p"] = (df_sorted["antallsolgt"] / 4).apply(lambda x: max(1, round(x)))

        # Beregn total kostnad for anbefalt innkjÃ¸p
        total_cost = 0
        st.markdown("### Anbefalt innkjÃ¸psstrategi")
        st.markdown("Her er en oversikt over anbefalte innkjÃ¸p basert pÃ¥ salgsdata av valgt hovedprodukt i filtreringen over:")

        for index, row in df_sorted.iterrows():
            # Anta en standard innkjÃ¸pspris for hver SKU (kan tilpasses)
            purchase_price = 300  # Eksempel: 300 kr per enhet
            total_cost += row["Anbefalt innkjÃ¸p"] * purchase_price
            st.markdown(f"- **{row['sku']}**: Anbefalt innkjÃ¸p {row['Anbefalt innkjÃ¸p']} enheter")

        st.markdown(f"**Total kostnad for anbefalt innkjÃ¸p:** {total_cost:,.0f} kr")

        # Begrens antall rader i diagrammet til maks 25
        df_chart = df_sorted.head(25)

        # Visualisering â€“ stolpediagram med Plotly dark-tema (blÃ¥/mÃ¸rkt diagram)
        fig = px.bar(
            df_chart, 
            x="sku", 
            y="antallsolgt", 
            title=f"Antall solgt for valgt produkt og lengde",
            hover_data=["product_name", "sku"],
            template="plotly_dark"
        )

        st.plotly_chart(fig, use_container_width=True)
        st.markdown("**Filtrerte SKU-er sortert etter antall solgt:**")

        # Oppdatert tabellvisning (vis 40 rader uten scrolling, skjul fÃ¸rste kolonne)
        st.dataframe(
            df_sorted[["sku", "product_name", "antallsolgt"]].head(40),
            height=800  # Juster hÃ¸yden for Ã¥ vise 40 rader uten scrolling
        )

    # Seksjon for lagerinnkjÃ¸p og anbefalinger
    st.markdown("### LagerinnkjÃ¸p og anbefalinger")
    st.markdown("""
    Visningen over viser antall solgt og anbefalt innkjÃ¸psstrategi for valgt hovedprodukt (filtreringen Ã¸verst). Endre filtrene for Ã¥ se innkjÃ¸psstrategi for andre produkter.
    Basert pÃ¥ salgsdata anbefaler vi varebestilling ca hver 3. uke, og overstÃ¥ende produktmiks/lagerinnkjÃ¸p av valgt produktvisning for de neste 3 ukene.
    (LuxusHair har 3 ukers leveringstid fra bestilling til varer ankommer lageret):
    """)

# FANE 4 â€“ Digital Analyse & SEO
# ----------------------------
with tabs[3]:
    st.header("Digital Analyse & SEO")
    st.markdown("""
**LuxusHair Analytics Integrasjon**  
Dette er LuxusHair sin Analytics-integrasjon â€“ standarddata benyttes, men denne lÃ¸sningen kan custom-integreres for den enkelte bedrift.
    """)
    if "date" not in traffic_df.columns:
        st.error("Ingen 'date' kolonne funnet i trafikkdata.")
    else:
        if traffic_df.empty:
            traffic_df = pd.DataFrame({
                "sÃ¸keord": ["luxushair behandling", "premium extensions", "keratin behandling"],
                "antallvisninger": [1000, 800, 600]
            })
        seo_agg = traffic_df.groupby("sÃ¸keord", as_index=False)["antallvisninger"].sum()
        seo_agg = seo_agg.sort_values(by="antallvisninger", ascending=False).head(35)
        st.markdown("#### Top 35 sÃ¸keord (sortert fra hÃ¸y til lav visning):")
        st.table(seo_agg)
        fig_traffic = px.bar(seo_agg, x="sÃ¸keord", y="antallvisninger", 
                             title="Topp sÃ¸keord (visninger)", template="plotly_white")
        st.plotly_chart(fig_traffic, use_container_width=True, key="fig_traffic_chart")
    st.markdown("""
**SEO-ekspertise og annonseplan:**  
- Beste Keywords: luxushair behandling, premium extensions, keratin behandling  
- Meta-tittel forslag: "LuxusHair â€“ Eksklusive HÃ¥rbehandlinger og Premium Extensions"  
- Meta-beskrivelse forslag: "Opplev luksus med vÃ¥re profesjonelle hÃ¥rbehandlinger. Bestill nÃ¥ for en eksklusiv hÃ¥rtransformation!"  
- Annonseringsstrategi: Google Ads, Facebook Ads, Instagram Ads, YouTube, Pinterest  
- Postingsplan: Instagram (3â€“4 innlegg/uke), Facebook (2â€“3 innlegg/uke), YouTube (1 video/uke), Blogg (2â€“3 innlegg/mÃ¥ned), Pinterest (daglige pins)
    """, unsafe_allow_html=True)

# ----------------------------
# FANE 5 â€“ Konkurrentanalyse
# ----------------------------
with tabs[4]:
    st.header("Konkurrentanalyse")
    competitor_data = pd.DataFrame({
        "Firma": ["LuxusHair", "HairLux", "StylePro", "GlamourHair"],
        "Omsetning": [6600000, 4300000, 2900000, 3500000]
    })
    fig_comp = px.bar(competitor_data, x="Firma", y="Omsetning", title="Konkurrentanalyse")
    st.plotly_chart(fig_comp, use_container_width=True, key="fig_comp_chart")
    st.markdown("Estimerte omsetningstall for hovedkonkurrentene i 2024. Dette hjelper med Ã¥ vurdere vÃ¥r markedsposisjon.")

# ----------------------------
# I FANE 6 â€“ BedriftsrÃ¥d (Oppsummering)
with tabs[5]:
    st.header("BedriftsrÃ¥d (Oppsummering)")
    st.markdown("""
Her oppsummeres bedriftsrÃ¥d, samt nÃ¸kkeltall knyttet til optimal budsjettering og produktprising.
                
âœ… Optimaliser lagerstyring: Juster vareinnkjÃ¸p etter faktisk etterspÃ¸rsel.  
âœ… Reduser kostnader: Forhandle med leverandÃ¸rer og effektiviser interne prosesser.  
âœ… Forbedre markedsfÃ¸ring: FÃ¸lg SEO-strategien og publiser jevnlig i SoMe-kanaler.  
âœ… Ã˜k konverteringsrate: Optimaliser brukeropplevelsen pÃ¥ nettsiden.  
âœ… OvervÃ¥k jevnlig: FÃ¸lg nÃ¸kkeltall og handle raskt ved budsjettavvik.
    """)

    st.markdown("### Optimal budsjettert omsetning")
    if total_cost is not None:
        st.markdown(f"""
        **Total kostnad:** {total_cost:,.0f} kr  
        **Optimal budsjettert omsetning:** {optimal_revenue:,.0f} kr  

        **Forklaring:**  
        Her brukes en fortjenestemargin pÃ¥ {selected_margin:.0f}% (desimalverdi {margin}) for Ã¥ beregne optimal budsjettert omsetning.  
        Formelen er:  
        â€ƒâ€ƒTotal kostnad / (1 â€“ margin)  
        AltsÃ¥, dersom de totale kostnadene er {total_cost:,.0f} kr,  
        mÃ¥ omsetningen vÃ¦re minst {optimal_revenue:,.0f} kr for Ã¥ oppnÃ¥ Ã¸nsket fortjeneste.
        """)
    
    # Last inn innkjÃ¸pspriser (bruk standarddata hvis ingen fil er lastet opp)
    if uploaded_prices is not None:
        df_prices = pd.read_csv(uploaded_prices)
        purchase_prices = dict(zip(df_prices["Produkt"], df_prices["Pris"]))
    else:
        purchase_prices = {
            "Clip On Extension Virgin 55 cm": 1300,
            "Clip On Extension Virgin 60 cm": 3900,
            "Clip On Extension Virgin 40 cm": 400,
            "Clip On Extension Virgin 50 cm": 500,
            "Tape On Extension Virgin 40 cm": 290,
            "Tape On Extension Virgin 50 cm": 330,
            "Tape On Extension Virgin 60 cm": 400,
            "Keratin Extension Virgin 40 cm": 220,
            "Keratin Extension Virgin 50 cm": 270,
            "Keratin Extension Virgin 60 cm": 350,
            "Keratin Treatment": 100
        }
    fallback_tekst = "\n".join([f"- {produkt}: {pris:,} kr" for produkt, pris in purchase_prices.items()])
    st.markdown(f"**Standard innkjÃ¸pspriser (fallback):**\n\n{fallback_tekst}")
    
    # Bygg liste med hovedproduktalternativer
    lengths = ["40", "50", "55", "60"]
    main_product_options = []
    for typ in ["Clip On Extension Virgin", "Tape On Extension Virgin", "Keratin Extension Virgin"]:
        for l in lengths:
            main_product_options.append(f"{typ} {l} cm")
    default_main = "Clip On Extension Virgin 40 cm"
    default_main_index = main_product_options.index(default_main) if default_main in main_product_options else 0

    # Drop-down for valg av hovedprodukt med unik key (kun i FANE 6)
    selected_main_product = st.selectbox(
        "Velg hovedprodukt for optimal prisberegning (anbefalt utsalgspris vises lenger ned pÃ¥ siden)",
        options=main_product_options,
        index=default_main_index,
        key="main_product_select_unique_f6"
    )
    normalized_main_product = selected_main_product.replace("Extensions ", "Extension ")

    # Brukerinput for margin og overhead (unike keys)
    user_margin_tab6 = st.number_input(
        "Angi fortjenestemargin (%)", 
        min_value=0.0, 
        max_value=100.0,
        value=30.0, 
        step=1.0, 
        key="margin_bedriftsrad_tab6"
    ) / 100.0
    user_overhead_tab6 = st.number_input(
        "Angi overhead (%)", 
        min_value=0.0, 
        max_value=100.0,
        value=25.0, 
        step=1.0, 
        key="overhead_bedrads_tab6"
    ) / 100.0

    st.markdown(
        """
**Forklaring - Optimal utsalgspris:**  
Optimal utsalgspris beregnes slik:  
((InnkjÃ¸pspris Ã— (1 + overhead)) / (1 â€“ fortjenestemargin))  
Her brukes en overhead pÃ¥ {0:.0f}% og en fortjenestemargin pÃ¥ {1:.0f}%.  
Utsalgsprisen inkluderer merverdiavgift.
Velg hovedprodukt du Ã¸nsker se anbefalt utsalgspris for i dropdownen over.
        """.format(user_overhead_tab6 * 100, user_margin_tab6 * 100)
    )

# Hent fallback-innkjÃ¸pspris for det valgte hovedproduktet og beregn optimal pris
fallback_price = purchase_prices.get(normalized_main_product, None)
if fallback_price is not None:
    # Beregn totalkostnad og optimal pris
    totalkost = fallback_price * (1 + user_overhead_tab6)
    computed_price = totalkost / (1 - user_margin_tab6)
    optimal_price = (computed_price // 10) * 10 + 9  # Rund av til nÃ¦rmeste 10 og legg til 9 for "psykologisk pris"

    # Vis optimal produktpris
    st.markdown(
        f"### Optimale produktpriser\n**Optimal produktpris for {normalized_main_product}: {int(optimal_price):,} kr**"
    )
else:
    # Vis melding hvis ingen pris er funnet
    st.info(
        "Ingen standard innkjÃ¸pspris funnet for det valgte hovedproduktet. "
        "Dataene er basert pÃ¥ LuxusHair sine standarddata, og oppdateres nÃ¥r din bedrift laster opp egne priser."
    )

# Beregn og vis optimal budsjettert omsetning
if total_cost is not None:
    st.markdown("### Optimal budsjettert omsetning")
    optimal_revenue = total_cost / (1 - user_margin_tab6)
    st.markdown(f"""
    **Total kostnad:** {total_cost:,.0f} kr  
    **Optimal budsjettert omsetning:** {optimal_revenue:,.0f} kr  

    **Forklaring:**  
    Her brukes en fortjenestemargin pÃ¥ {user_margin_tab6 * 100:.0f}% (desimalverdi {user_margin_tab6}) for Ã¥ beregne optimal budsjettert omsetning.  
    Formelen er:  
    â€ƒâ€ƒTotal kostnad / (1 â€“ margin)  
    AltsÃ¥, dersom de totale kostnadene er {total_cost:,.0f} kr,  
    mÃ¥ omsetningen vÃ¦re minst {optimal_revenue:,.0f} kr for Ã¥ oppnÃ¥ Ã¸nsket fortjeneste.
    """)
else:
    st.info("Kostnadsdata utilgjengelig for beregning av optimal budsjettert omsetning.")

# Forklaring for fanen
st.markdown("""
Denne fanen presenterer en samlet oversikt over optimale utsalgspriser for hovedprodukter og budsjettert omsetning.  
Dataene er basert pÃ¥ standarddata fra LuxusHair og oppdateres nÃ¥r egne priser og kostnadsdata lastes opp.
""")
# ----------------------------
# FANE 7 â€“ Verdivurdering
with tabs[6]:
    st.header("Verdivurdering")
    ebitda = 755000
    try:
        cost_data = pd.read_csv("./standardized_cost.csv")
        if "driftsresultat" in cost_data.columns:
            driftsresultat = pd.to_numeric(cost_data["driftsresultat"], errors="coerce").sum()
        else:
            driftsresultat = None
    except Exception as e:
        driftsresultat = None
    value_df = pd.DataFrame({
        "Metode": ["EBITDA-metoden", "DCF-modellen"],
        "Verdi (kr)": [ebitda * 8, ebitda * 11]
    })
    fig_value = px.bar(value_df, x="Metode", y="Verdi (kr)", title="Estimert selskapsverdi")
    extra = ""
    if driftsresultat is not None:
        extra = f"\n- Faktisk driftsresultat: {int(driftsresultat):,} kr (basert pÃ¥ kostnadsdatafilen)."
    explanation = (
        "Bransjefaktoren, satt til 8 for EBITDA-metoden, er basert pÃ¥ historiske data og markedsforventninger. "
        "Faktoren reflekterer forhold som vekstpotensial, risiko og lÃ¸nnsomhet."
    )
    text = f"""
    **Verdivurdering â€“ Forklaring:**

    - EBITDA: {ebitda:,.0f} kr  
    - EBITDA x 8 = {ebitda * 8:,.0f} kr  
    - DCF x 11 = {ebitda * 11:,.0f} kr  

    Forutsetter stabil drift og kontantstrÃ¸m.{extra}

    {explanation}
    """
    st.plotly_chart(fig_value, use_container_width=True, key="fig_value_chart")
    st.markdown(text)

# ----------------------------
# FANE 8 â€“ Analytics Live-data (med datovelger)
with tabs[7]:
    st.header("Analytics Live-data")
    st.markdown("""
    **SmartDash Analytics Integrasjon**  
    Tilpass spÃ¸rringen ved Ã¥ velge datoperiode. Standarddata benyttes â€“ lÃ¸sningen kan skreddersys med egne KPI-er.
    """)
    
    # Legg til datovelger for Analytics (start- og sluttdato)
    ga_start_date = st.date_input("Velg GA startdato", value=datetime(2023, 1, 1), key="ga_start_date")
    ga_end_date = st.date_input("Velg GA sluttdato", value=datetime.today(), key="ga_end_date")
    
    available_metrics = {
        "Active Users": "activeUsers",
        "New Users": "newUsers",
        "Sessions": "sessions",
        "Conversions": "conversions"
    }
    selected_display_metrics = st.multiselect("Velg metrikker", list(available_metrics.keys()),
                                              default=["Active Users", "New Users"],
                                              key="ga_metric_live")
    selected_metrics = [Metric(name=available_metrics[m]) for m in selected_display_metrics]
    
    def get_live_analytics(selected_metrics, start_date, end_date):
        client = BetaAnalyticsDataClient()
        metric_names = [m.name for m in selected_metrics]
        request = RunReportRequest(
            property="properties/283157216",
            dimensions=[{"name": "date"}],
            metrics=[{"name": name} for name in metric_names],
            date_ranges=[{"start_date": start_date.strftime("%Y-%m-%d"), "end_date": end_date.strftime("%Y-%m-%d")}]
        )
        response = client.run_report(request)
        data = {"Dato": [row.dimension_values[0].value for row in response.rows]}
        for i, name in enumerate(metric_names):
            data[name] = [int(row.metric_values[i].value) for row in response.rows]
        df = pd.DataFrame(data)
        fig = px.line(
            df, 
            x="Dato", 
            y=metric_names, 
            title="Live Analytics Data",
            color_discrete_sequence=px.colors.qualitative.Bold  # Forbedrede farger
        )
        return fig
    
    try:
        fig_live = get_live_analytics(selected_metrics, ga_start_date, ga_end_date)
        fig_live.update_layout(
            title_font_size=24,
            xaxis=dict(title="Dato", tickangle=45),
            yaxis=dict(title="MÃ¥leverdi"),
            margin=dict(l=50, r=50, t=80, b=50),
            template="plotly_white"
        )
        st.plotly_chart(fig_live, use_container_width=True, key="fig_live_chart")
    except Exception as e:
        st.error(f"Kunne ikke hente live data: {e}")
